# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('..'))


# -- Project information -----------------------------------------------------
import importlib
import inspect
from typing import Union

from docutils.parsers.rst import Directive, directives
from docutils.statemachine import StringList, string2lines
from marshmallow.fields import DateTime, Field
from marshmallow.schema import SchemaMeta
from teal.enums import Country, Currency, Layouts, Subdivision
from teal.marshmallow import EnumField

from ereuse_devicehub.marshmallow import NestedOn

project = 'Devicehub'
copyright = '2020, eReuse.org team'
author = 'eReuse.org team'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = '0.1'

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.viewcode',
    'sphinxcontrib.plantuml',
    'sphinx.ext.autosectionlabel',
    'sphinx.ext.autodoc',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'Devicehubdoc'

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        'Devicehub.tex',
        'Devicehub Documentation',
        'eReuse.org team',
        'manual',
    ),
]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, 'devicehub', 'Devicehub Documentation', [author], 1)]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        'Devicehub',
        'Devicehub Documentation',
        author,
        'Devicehub',
        'One line description of project.',
        'Miscellaneous',
    ),
]

# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'python': ('https://docs.python.org/3', None)}

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# Plantuml
plantuml_output_format = 'svg_img'

# favicon
html_favicon = 'img/favicon.ico'

# autosectionlabel
autosectionlabel_prefix_document = True
autodoc_member_order = 'bysource'

import docutils.nodes as n


class DhlistDirective(Directive):
    """Generates documentation from Devicehub Schema.

    This requires :py:class:`ereuse_devicehub.resources.schemas.SchemaMeta`.
    You will find in that module more information.
    """

    has_content = False

    # Definition of passed-in options
    option_spec = {'module': directives.unchanged}

    def _import(self, module):
        for obj in vars(module).values():
            if inspect.isclass(obj):
                if isinstance(obj, SchemaMeta) and hasattr(obj, '_base_class'):
                    yield obj

    def run(self):
        module = importlib.import_module(self.options['module'])
        things = tuple(self._import(module))

        sections = []
        sections.append(self.links(things))  # Make index
        for thng in things:
            # Generate a section for each class, with a title,
            # fields description and a paragraph
            section = n.section(ids=[self._id(thng)])
            section += n.title(thng.__name__, thng.__name__)
            section += self.parse('*Extends {}*'.format(thng._base_class))
            if thng.__doc__:
                section += self.parse(thng.__doc__)
            fields = n.field_list()
            for key, f in thng._own:
                name = n.field_name(text=f.data_key or key)
                body = [
                    self.parse(
                        '{} {}'.format(self.type(f), f.metadata.get('description', ''))
                    )
                ]
                if isinstance(f, EnumField):
                    body.append(self._parse_enum_field(f))
                attrs = n.field_list()
                if f.dump_only:
                    attrs += self.field('Submit', 'No.')
                if f.required:
                    attrs += self.field('Required', f.required)
                fields += n.field('', name, n.field_body('', *body, attrs))
            section += fields
            sections.append(section)
        return sections

    def _parse_enum_field(self, f):
        from ereuse_devicehub.resources.device import states

        if issubclass(f.enum, (Subdivision, Currency, Country, Layouts, states.State)):
            return self.parse(f.enum.__doc__)
        else:
            enum_fields = n.field_list()
            for el in f.enum:
                enum_fields += self.field(el.name, el.value)
            return enum_fields

    def field(self, name: str, body: Union[str, bool]):
        """Generates a field node with a name and a paragraph body."""
        if isinstance(body, bool):
            body = 'Yes.' if body else 'No.'
        body = str(body) if body else ''
        return n.field('', n.field_name(text=name), n.field_body('', self.parse(body)))

    def type(self, field: Field):
        """Parses the type field."""
        if isinstance(field, NestedOn):
            t = ''
            if field.many:
                t = 'List of '
            t = t + str(field.schema.t)
        elif isinstance(field, EnumField):
            t = field.enum.__name__
        elif isinstance(field, DateTime):
            t = 'Date time (ISO 8601 with timezone)'
        else:
            t = field.__class__.__name__
            if 'str' in t.lower():
                t = 'Text'
        if 'unit' in field.metadata:
            t = t + ' ({})'.format(field.metadata['unit'])
        return t + '.'

    def links(self, things, parent='Schema'):
        """Generates an index of things with inheritance awareness."""
        l = n.bullet_list('')
        for child in (c for c in things if c._base_class == parent):
            ref = n.reference(text=child.__name__)
            ref['refuri'] = '#{}'.format(self._id(child))
            p = n.paragraph()
            p += ref
            l += n.list_item('', p)
            sub_list = self.links(things, parent=child.__name__)
            if sub_list:
                l += sub_list
        return l

    def _id(self, thing):
        """Generate an id to use as html anchors."""
        return n.make_id('dh-{}'.format(thing.__name__))

    def parse(self, text) -> n.container:
        """Parses text possibly containing ReST stuff and adds it in
        a node."""
        p = n.container('')
        self.state.nested_parse(StringList(string2lines(inspect.cleandoc(text))), 0, p)
        return p
        # return publish_doctree(text).children


def setup(app):
    app.add_directive('dhlist', DhlistDirective)
    return {'version': '0.1'}
